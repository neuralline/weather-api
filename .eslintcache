[{"C:\\apps\\test-projects\\star-wars\\src\\App.tsx":"1","C:\\apps\\test-projects\\star-wars\\src\\index.tsx":"2","C:\\apps\\test-projects\\star-wars\\src\\graphql\\query.ts":"3","C:\\apps\\test-projects\\weather-api\\src\\index.tsx":"4","C:\\apps\\test-projects\\weather-api\\src\\App.tsx":"5","C:\\apps\\test-projects\\weather-api\\src\\context\\Provider.tsx":"6","C:\\apps\\test-projects\\weather-api\\src\\pages\\Home.tsx":"7","C:\\apps\\test-projects\\weather-api\\src\\pages\\SingleEvent.tsx":"8","C:\\apps\\test-projects\\weather-api\\src\\components\\Forecast.tsx":"9","C:\\apps\\test-projects\\weather-api\\src\\mock\\weather.ts":"10","C:\\apps\\test-projects\\weather-api\\src\\functions\\featchWeather.ts":"11","C:\\apps\\test-projects\\weather-api\\src\\mock\\cities.ts":"12","C:\\apps\\test-projects\\weather-api\\src\\functions\\sortData.ts":"13","C:\\apps\\test-projects\\weather-api\\src\\functions\\sortWeatherData.ts":"14","C:\\apps\\test-projects\\weather-api\\src\\components\\TinyCast.tsx":"15","C:\\apps\\test-projects\\weather-api\\src\\components\\Nav.tsx":"16"},{"size":583,"mtime":1612123193001,"results":"17","hashOfConfig":"18"},{"size":921,"mtime":1612123211182,"results":"19","hashOfConfig":"18"},{"size":310,"mtime":1612122811019,"results":"20","hashOfConfig":"18"},{"size":193,"mtime":1612780247693,"results":"21","hashOfConfig":"22"},{"size":858,"mtime":1612860079736,"results":"23","hashOfConfig":"22"},{"size":1507,"mtime":1612859942663,"results":"24","hashOfConfig":"22"},{"size":1163,"mtime":1612859234203,"results":"25","hashOfConfig":"22"},{"size":1496,"mtime":1612857481994,"results":"26","hashOfConfig":"22"},{"size":431,"mtime":1612851595129,"results":"27","hashOfConfig":"22"},{"size":1021,"mtime":1612848412500,"results":"28","hashOfConfig":"22"},{"size":767,"mtime":1612860108867,"results":"29","hashOfConfig":"22"},{"size":279,"mtime":1612857849375,"results":"30","hashOfConfig":"22"},{"size":398,"mtime":1612856989393,"results":"31","hashOfConfig":"22"},{"size":397,"mtime":1612856051087,"results":"32","hashOfConfig":"22"},{"size":393,"mtime":1612859949432,"results":"33","hashOfConfig":"22"},{"size":628,"mtime":1612860161347,"results":"34","hashOfConfig":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14wry2d",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"aybsqr",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"43"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"43"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\apps\\test-projects\\star-wars\\src\\App.tsx",[],"C:\\apps\\test-projects\\star-wars\\src\\index.tsx",[],"C:\\apps\\test-projects\\star-wars\\src\\graphql\\query.ts",[],"C:\\apps\\test-projects\\weather-api\\src\\index.tsx",[],["72","73"],"C:\\apps\\test-projects\\weather-api\\src\\App.tsx",[],"C:\\apps\\test-projects\\weather-api\\src\\context\\Provider.tsx",[],"C:\\apps\\test-projects\\weather-api\\src\\pages\\Home.tsx",["74"],"import { useContext, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport CityForecast from '../components/Forecast'\r\nimport { StoreContext } from '../context/Provider'\r\nimport { State, Weather } from '../custom-env'\r\nimport { fetchWeatherData } from '../functions/featchWeather'\r\nimport { cities } from '../mock/cities'\r\n\r\nconst Home = () => {\r\n  const { state, dispatch } = useContext<State | any>(StoreContext)\r\n  const { id }: { id: string } = useParams()\r\n  const url = 'https://weatherbit-v1-mashape.p.rapidapi.com/current'\r\n\r\n  const currentCity = state.weather.find(\r\n    (city: Weather) => city.city_name === id\r\n  )\r\n\r\n  console.log('Home city', currentCity)\r\n  useEffect(() => {\r\n    if (!currentCity) {\r\n      const { lat, lon } = cities[id]\r\n      fetchWeatherData({ lon, lat, url }).then(response => {\r\n        dispatch({\r\n          type: 'ADD_CITY',\r\n          city: response\r\n        })\r\n      })\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      Home\r\n      {currentCity ? (\r\n        <CityForecast weather={currentCity} />\r\n      ) : (\r\n        <div>Loading...</div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","C:\\apps\\test-projects\\weather-api\\src\\pages\\SingleEvent.tsx",["75","76","77"],"import { useContext, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport TinyCast from '../components/TinyCast'\r\nimport { StoreContext } from '../context/Provider'\r\nimport { Weather } from '../custom-env'\r\nimport { fetchWeatherData } from '../functions/featchWeather'\r\nimport { cities } from '../mock/cities'\r\nconst SingleEvent = () => {\r\n  const { state, dispatch }: any = useContext(StoreContext)\r\n  const { id }: { id: string } = useParams()\r\n  const url = 'https://weatherbit-v1-mashape.p.rapidapi.com/forecast/daily'\r\n\r\n  //const item: IEvent = items.find((item: IEvent) => item.id === id)\r\n\r\n  const forecast = state.forecast.find((city: any) => city.city_name === id)\r\n  console.log(id)\r\n  console.log('cities[id]', cities[id])\r\n  if (!forecast) {\r\n    const { lat, lon } = cities[id]\r\n    console.log('not found')\r\n    /*    fetchWeatherData({ lon, lat, url }).then(response => {\r\n      dispatch({\r\n        type: 'ADD_FORECAST',\r\n        city: response\r\n      })\r\n    }) */\r\n  }\r\n  console.log('forecast', forecast)\r\n  useEffect(() => {\r\n    const { lat, lon } = cities[id]\r\n    fetchWeatherData({ lon, lat, url }).then(response => {\r\n      dispatch({\r\n        type: 'ADD_FORECAST',\r\n        city: response\r\n      })\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"cast-container\">\r\n      <h2>single</h2>\r\n      {forecast &&\r\n        forecast.forecast.map((cast: Weather) => <TinyCast weather={cast} />)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SingleEvent\r\n","C:\\apps\\test-projects\\weather-api\\src\\components\\Forecast.tsx",[],"C:\\apps\\test-projects\\weather-api\\src\\mock\\weather.ts",[],"C:\\apps\\test-projects\\weather-api\\src\\functions\\featchWeather.ts",["78"],"import axios from 'axios'\r\nimport { Fetch } from '../custom-env'\r\nimport { initialData, sampleResponse } from '../mock/weather'\r\n\r\nexport const fetchWeatherData: Fetch = async ({ lat, lon, url }) => {\r\n  //@ts-ignore\r\n\r\n  const options = {\r\n    method: 'GET',\r\n    url: url,\r\n    //@ts-ignore\r\n    params: { lat, lon },\r\n    headers: {\r\n      'x-rapidapi-key': process.env.REACT_APP_API_KEY,\r\n      'x-rapidapi-host': 'weatherbit-v1-mashape.p.rapidapi.com'\r\n    }\r\n  }\r\n  try {\r\n    let res: any = {}\r\n\r\n    const response = await axios\r\n      //@ts-ignore\r\n      .request(options)\r\n    res = response.data\r\n\r\n    return {\r\n      ...initialData,\r\n      ...res\r\n    }\r\n  } catch (error) {\r\n    console.error(error)\r\n    return { ...initialData, error: true }\r\n  }\r\n}\r\n","C:\\apps\\test-projects\\weather-api\\src\\mock\\cities.ts",[],"C:\\apps\\test-projects\\weather-api\\src\\functions\\sortData.ts",["79"],"import { Forecast } from '../custom-env'\r\n\r\nexport const sortForecast = (forecast: any) => {\r\n  const newForecast = forecast.data.map((res: any) => {\r\n    return {\r\n      datetime: '2021-02-09',\r\n      temp: res.temp,\r\n      description: res.weather.description,\r\n      wind_spd: res.wind_spd,\r\n      error: false\r\n    }\r\n  })\r\n  return { city_name: forecast.city_name, forecast: newForecast }\r\n}\r\n","C:\\apps\\test-projects\\weather-api\\src\\functions\\sortWeatherData.ts",[],"C:\\apps\\test-projects\\weather-api\\src\\components\\TinyCast.tsx",[],"C:\\apps\\test-projects\\weather-api\\src\\components\\Nav.tsx",["80"],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":29,"column":6,"nodeType":"87","endLine":29,"endColumn":8,"suggestions":"88"},{"ruleId":"89","severity":1,"message":"90","line":19,"column":13,"nodeType":"91","messageId":"92","endLine":19,"endColumn":16},{"ruleId":"89","severity":1,"message":"93","line":19,"column":18,"nodeType":"91","messageId":"92","endLine":19,"endColumn":21},{"ruleId":"85","severity":1,"message":"94","line":37,"column":6,"nodeType":"87","endLine":37,"endColumn":8,"suggestions":"95"},{"ruleId":"89","severity":1,"message":"96","line":3,"column":23,"nodeType":"91","messageId":"92","endLine":3,"endColumn":37},{"ruleId":"89","severity":1,"message":"97","line":1,"column":10,"nodeType":"91","messageId":"92","endLine":1,"endColumn":18},{"ruleId":"89","severity":1,"message":"98","line":1,"column":10,"nodeType":"91","messageId":"92","endLine":1,"endColumn":18},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentCity', 'dispatch', and 'id'. Either include them or remove the dependency array.","ArrayExpression",["101"],"@typescript-eslint/no-unused-vars","'lat' is assigned a value but never used.","Identifier","unusedVar","'lon' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["102"],"'sampleResponse' is defined but never used.","'Forecast' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},"Update the dependencies array to be: [currentCity, dispatch, id]",{"range":"107","text":"108"},"Update the dependencies array to be: [dispatch, id]",{"range":"109","text":"110"},[952,954],"[currentCity, dispatch, id]",[1266,1268],"[dispatch, id]"]